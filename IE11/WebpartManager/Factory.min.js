'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SortByOrder = SortByOrder;
exports.ProgressLog = ProgressLog;
exports.ReturnDataProperty = ReturnDataProperty;
exports.Field = Field;
exports.List = List;
/**
 * Factory.min.js
 * @build 2022.08.10
 * @author Wilfredo Pacheco
 * (C) 2020-2022 WP
 */

/**
 * SortByOrder
 * @param {Object} a Order property is call on this object to compare to the following;
 * @param {Object} b Order property is call on this object to compare to the following;
 */
function SortByOrder(a, b) {
    return a.Order - b.Order;
}

/**
 * @param {String} Str Progress String passed by application;
 */
function ProgressLog(Str, Callback) {

    if (!!Callback) {
        Callback(Str);
    }

    try {
        return console.info('%c' + Str, 'background: #222; color: #23d82f');
    }

    /** This catches non-Google Chrome browsers; */
    catch (e) {
        return console.info(Str);
    };
}

/**
 * Used to return the d property from the Object passed;
 * @return {Object} Data property value from SharePoint response;
 */
function ReturnDataProperty(data) {
    return data.d;
}

/**
 * Field
 * @desc FieldTypeKind for Microsoft SharePoint
 *  
 * @type {FieldTypeKind} - 2 (Single Line of Text)
 * @type {FieldTypeKind} - 3 (Mulitiple Lines of Text)
 * @type {FieldTypeKind} - 4 (Date)
 * @type {FieldTypeKind} - 6 (Choice)
 * @type {FieldTypeKind} - 7 (Lookup)
 * @type {FieldTypeKind} - 8 (Boolean)
 * @type {FieldTypeKind} - 9 (Number)
 * @type {FieldTypeKind} - 20 (Person or Group)
 * 
 */
function Field(Title, FieldTypeKind) {
    this.__metadata = { type: "SP.Field" };
    this.Title = Title;
    this.FieldTypeKind = FieldTypeKind;
    this.Required = false;
    this.EnforceUniqueValues = false;
    this.StaticName = Title;
}

/**
 * List
 * @param {String} Title Title of list;
 * @param {String} Description description of list;
 * @param {Number} BaseTemplate Microsoft SharePoint template number value;
 * @exmaple
 * BaseTemplate: 100 Regular List
 * BaseTemplate: 106 Calendar List
 */
function List(Title, Description, BaseTemplate) {

    this.__metadata = { type: "SP.List" };
    this.AllowContentTypes = true;
    this.BaseTemplate = BaseTemplate;
    this.ContentTypesEnabled = true;
    this.Description = Description;
    this.Title = Title;
}

exports.default = async function CreateList(App, Options, Callback) {
    var Route = App.Route;
    var Web = App.Web;
    var AddViewFieldTitle = Options.AddViewFieldTitle;
    var AddViewFieldGUID = Options.AddViewFieldGUID;
    var Fields = Options.Fields;
    var PredefinedData = Options.PredefinedData;

    var SharepointList = new List(Options.List.Title, Options.List.Description, Options.List.BaseTemplate);
    var ReqDigest = await Route.GetRequestDigest();
    var SharepointFieldArray = new Array();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var field = _step.value;
            var Title = field.Title;
            var FieldTypeKind = field.FieldTypeKind;

            var FieldItem = new Field(Title, FieldTypeKind);

            // Since the new Field call doesn't handle the EnforceUniqueValues property;
            if (field.EnforceUniqueValues) FieldItem.EnforceUniqueValues = field.EnforceUniqueValues;

            // Since the new Field call doesn't handle the Required property;
            if (field.Required) FieldItem.Required = field.Required;
            SharepointFieldArray.push(FieldItem);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    ProgressLog('Creating ' + SharepointList.Title + ' List....', Callback); // Progress Checkpoint;
    var ListResponse = await Route.Post(Web.Url + '/_api/web/lists', SharepointList, ReqDigest).then(ReturnDataProperty);
    ProgressLog('Create ' + SharepointList.Title + ' Complete', Callback); // Progress Checkpoint;
    ProgressLog('Creating Fields....', Callback); // Progress Checkpoint;

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        var _loop = async function _loop() {
            var field = _step2.value;
            var Title = field.Title;

            ProgressLog('Creating ' + Title + ' Field....', Callback); // Progress Checkpoint;

            var RoleTitleResponse = await Route.Post(ListResponse.__metadata.uri + '/Fields', field, ReqDigest).then(ReturnDataProperty);
            /*JoePC*/ // if (RoleTitleResponse?.FieldTypeKind === 6)
            if (RoleTitleResponse && RoleTitleResponse.FieldTypeKind && RoleTitleResponse.FieldTypeKind === 6) {
                var template = Fields.find(function (f) {
                    return f.Title === RoleTitleResponse.Title;
                });
                /*JoePC*/if (template && template.Choices) {
                    var ChoiceRequest = RoleTitleResponse.Choices;
                    ChoiceRequest.results = template.Choices;
                    delete ChoiceRequest.__metadata;
                    await Route.Patch(RoleTitleResponse.__metadata.uri, {
                        Choices: ChoiceRequest,
                        __metadata: {
                            type: RoleTitleResponse.__metadata.type
                        }
                    }, ReqDigest);
                }
            }
            ProgressLog('Create ' + Title + ' Complete', Callback); // Progress Checkpoint;
        };

        for (var _iterator2 = SharepointFieldArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            await _loop();
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    ProgressLog('Create Fields Complete', Callback); // Progress Checkpoint;

    /** Start Fix the View */
    ProgressLog('Updating Default View....', Callback); // Progress Checkpoint;
    var ChangeDefaultView = await Route.Get(ListResponse.DefaultView.__deferred.uri, {
        $select: '*',
        $expand: 'ViewFields'
    }, ReqDigest);

    /**Add Fields: Default View */
    await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri + '/removeAllViewFields()', {}, ReqDigest).then(ReturnDataProperty);

    /** Checks for the option to add Title to the default view; */
    if (AddViewFieldTitle) await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri + '/addViewField(\'Title\')', new Object(), ReqDigest).then(ReturnDataProperty);

    var DefaultViewFields = Fields.filter(function (item) {
        return !!item.DefaultView;
    });
    DefaultViewFields.sort(SortByOrder);

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = DefaultViewFields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _field = _step3.value;
            await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri + '/addViewField(\'' + _field.Title + '\')', new Object(), ReqDigest).then(ReturnDataProperty);
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    if (AddViewFieldGUID) await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri + '/addViewField(\'GUID\')', {}, ReqDigest).then(ReturnDataProperty);

    ProgressLog('Updating Default View Complete', Callback); // Progress Checkpoint;
    /** End Fix the View */

    if (PredefinedData && PredefinedData.length) {
        var predefineddatacount;
        await async function () {
            ProgressLog('Creating Default List Items......', Callback); // Progress Checkpoint;
            var Metadata = { type: ListResponse.ListItemEntityTypeFullName };
            var ListItems = PredefinedData.map(function (item) {
                item.__metadata = Metadata;
                return item;
            });

            var FirstColumnLabel = Object.keys(PredefinedData[0])[0];
            predefineddatacount = 0;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {

                for (var _iterator4 = ListItems[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var request = _step4.value;

                    predefineddatacount++;
                    var response = await Route.Post(ListResponse.__metadata.uri + '/Items', request, ReqDigest).then(ReturnDataProperty);

                    ProgressLog('Data for ' + ListResponse.Title + ' | ' + predefineddatacount + ' of ' + ListItems.length + ' | ' + response[FirstColumnLabel], Callback); // Progress Checkpoint;
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            ProgressLog('Create ' + SharepointList.Title + ' Items Complete', Callback); // Progress Checkpoint;
        }();
    }

    Web.Lists.results.push(ListResponse);
    return ListResponse;
};